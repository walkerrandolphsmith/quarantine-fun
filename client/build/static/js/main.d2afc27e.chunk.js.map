{"version":3,"sources":["components/Loading/logo.svg","components/Loading/index.js","components/Grid/index.js","components/CandidateGame/index.js","components/selectors.js","components/Game/index.js","components/GameMaster/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","Loading","className","src","logo","alt","Grid","children","Board","cards","onSelect","map","card","index","Card","onClick","owner","backgroundColor","image","process","text","id","CandidateGame","useState","game","setGame","gameId","setGameId","useEffect","fetch","then","r","json","button","method","headers","body","JSON","stringify","data","_id","gameMasterHref","playerHref","gameMasterLink","to","playerLink","links","replacement","GetCardColor","selections","Object","keys","forEach","key","Game","client","useLocation","pathname","split","catch","error","realtimeselections","picks","selection","parseInt","hasBeenSelected","includes","pointerClass","cardColor","GameMaster","send","type","W3CWebSocket","App","state","onopen","console","log","onerror","onmessage","message","payload","parse","setState","value","e","path","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2afc27e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\n\r\nexport function Loading () {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        Loading\r\n      </header>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\n\r\nexport const Grid = ({ children }) => <div className=\"grid grid-cols-5 gap-4 p-8\">{children}</div>;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Loading } from '../Loading';\r\nimport { Grid } from '../Grid';\r\n\r\nfunction Board({ cards, onSelect, map }) {\r\n  return (\r\n    <Grid>\r\n      {cards.map(\r\n        (card, index) => <Card card={card} onClick={() => onSelect(index)} owner={map[index]} />\r\n      )}\r\n    </Grid>\r\n  )\r\n}\r\n\r\n\r\nfunction Card({ card, onClick, owner }) {\r\n  const backgroundColor = (() => {\r\n    if (owner === 0) return 'bg-indigo-700';\r\n    if (owner === 1) return 'bg-red-700';\r\n    if (owner === -1) return 'bg-orange-200'\r\n    return 'bg-gray-700'\r\n  })();\r\n\r\n  return (\r\n    <div\r\n      className=\"md:flex bg-orange-200 rounded-lg p-6 shadow-2xl\"\r\n      onClick={onClick}\r\n    >\r\n      <img\r\n        className=\"h-16 w-16 md:h-24 md:w-24 rounded-full mx-auto md:mx-0 md:mr-6\"\r\n        src={card.image !== 'null' ? card.image : `${process.env.PUBLIC_URL}/unkown.png`}\r\n        alt={card.text}\r\n      />\r\n      <div className=\"text-center md:text-left\">\r\n        <h2 className=\"text-2xl break-all\">({card.id}) {card.text}</h2>\r\n        <div className={`rounded-full h-8 w-8 flex items-center justify-center ${backgroundColor}`}></div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function CandidateGame() {\r\n  const [game, setGame] = useState(null)\r\n  const [gameId, setGameId] = useState(null)\r\n\r\n  useEffect(() => {\r\n      fetch('/api/getCandidateGame')\r\n      .then(r => r.json())\r\n      .then(game => {\r\n        setGame(game)\r\n      })\r\n    },\r\n    []\r\n  );\r\n\r\n  const replaceCard = (index) => {\r\n    fetch('/api/replaceCard')\r\n    .then(r => r.json())\r\n    .then(replacement => {\r\n      game.cards[index] = replacement;\r\n      setGame({\r\n        ...game,\r\n        cards: [...game.cards]\r\n      });\r\n    });\r\n  }\r\n\r\n  const createGame = () => {\r\n      fetch('/api/createGame', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': \"application/json\"\r\n        },\r\n        body: JSON.stringify(game),\r\n      })\r\n      .then(r => r.json())\r\n      .then(data => {\r\n        setGameId(data._id)\r\n      })\r\n  }\r\n\r\n  const button = (\r\n    <button\r\n      className=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded\"\r\n      onClick={createGame}>\r\n      Create Game\r\n    </button>\r\n  );\r\n\r\n  const gameMasterHref = `/game/${gameId}`;\r\n  const playerHref = `/play/${gameId}`;\r\n  const gameMasterLink = (\r\n    <button className=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded\">\r\n      <Link className=\"block w-full\" to={gameMasterHref}>Game Masters</Link>\r\n    </button>\r\n  )\r\n  const playerLink = (\r\n    <button className=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded ml-8\">\r\n      <Link className=\"block w-full\" to={playerHref}>Players</Link>\r\n    </button>\r\n  )\r\n  const links = (\r\n    <Fragment>\r\n      {gameMasterLink}\r\n      {playerLink}\r\n    </Fragment>\r\n  )\r\n\r\n  if(game === null) return <Loading />\r\n  return (\r\n    <Fragment>\r\n      <Board {...game} onSelect={replaceCard} />\r\n      {gameId !== null ? links : button}\r\n    </Fragment>\r\n  )\r\n}\r\n","export const GetCardColor = (owner) => {\r\n    if (owner === 0) return 'bg-indigo-700';\r\n    if (owner === 1) return 'bg-red-700';\r\n    if (owner === 2) return 'bg-black-700';\r\n    if (owner === 3 ) return 'bg-orange-200';\r\n    if (owner === -1) return 'bg-yellow-200';\r\n    return 'bg-gray-700';\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { Loading } from '../Loading';\r\nimport { Grid } from '../Grid';\r\nimport { GetCardColor } from '../selectors';\r\n\r\nfunction Board({ cards, onSelect, map, selections }) {\r\n\r\n  Object.keys(selections).forEach(index => map[index] = selections[index]);\r\n\r\n  return (\r\n    <Grid>\r\n      {cards.map(\r\n        (card, index) => <Card key={index} card={card} onClick={() => onSelect(index)} owner={map[index]} />\r\n      )}\r\n    </Grid>\r\n  )\r\n}\r\n\r\n\r\nfunction Card({ card, onClick, owner }) {\r\n  const backgroundColor = GetCardColor(owner);\r\n\r\n  return (\r\n    <div\r\n      className={`md:flex rounded-lg p-6 shadow-2xl ${backgroundColor}`}\r\n      onClick={onClick}\r\n    >\r\n      <img\r\n        className=\"h-16 w-16 md:h-24 md:w-24 rounded-full mx-auto md:mx-0 md:mr-6\"\r\n        src={card.image !== 'null' ? card.image : `${process.env.PUBLIC_URL}/unkown.png`}\r\n        alt={card.text}\r\n      />\r\n      <div className=\"text-center md:text-left\">\r\n        <h2 className=\"text-2xl break-all\">{card.text}</h2>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function Game({ client, selections }) {\r\n\r\n  const { pathname } = useLocation();\r\n  const gameId = pathname.split('/play/')[1];\r\n\r\n  const [game, setGame] = useState(null)\r\n  useEffect(() => {\r\n      fetch(`/api/play/${gameId}`)\r\n      .then(r => r.json())\r\n      .then(game => {\r\n        setGame(game)\r\n      })\r\n      .catch(error => {})\r\n    },\r\n    []\r\n  );\r\n\r\n  if(game == null) return <Loading />\r\n  return <Board {...game} onSelect={() => {}} selections={selections} />\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { Loading } from '../Loading';\r\nimport { Grid } from '../Grid';\r\nimport { GetCardColor } from '../selectors';\r\n\r\nfunction Board({ cards, onSelect, map, selections, realtimeselections }) {\r\n  const picks = [...selections, ...realtimeselections].map(selection => parseInt(selection));\r\n  return (\r\n    <Grid>\r\n      {cards.map(\r\n        (card, index) => <Card key={index} card={card} onClick={() => onSelect(index)} owner={map[index]} hasBeenSelected={picks.includes(index)} />\r\n      )}\r\n    </Grid>\r\n  )\r\n}\r\n\r\n\r\nfunction Card({ card, onClick, owner, hasBeenSelected }) {\r\n  const backgroundColor = GetCardColor(owner);\r\n  const pointerClass = hasBeenSelected ? '' : 'cursor-pointer'\r\n  const cardColor = hasBeenSelected ? backgroundColor : 'bg-orange-200';\r\n\r\n  return (\r\n    <div\r\n      className={`md:flex rounded-lg p-6 shadow-2xl ${cardColor} ${pointerClass}`}\r\n      onClick={onClick}\r\n    >\r\n      { !hasBeenSelected && <img\r\n        className=\"h-16 w-16 md:h-24 md:w-24 rounded-full mx-auto md:mx-0 md:mr-6\"\r\n        src={card.image !== 'null' ? card.image : `${process.env.PUBLIC_URL}/unkown.png`}\r\n        alt={card.text}\r\n      />}\r\n      <div className=\"text-center md:text-left\">\r\n        <h2 className=\"text-2xl break-all\">{card.text}</h2>\r\n        <div className={`rounded-full h-8 w-8 flex items-center justify-center ${backgroundColor}`}></div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function GameMaster({ client, selections }) {\r\n\r\n  const { pathname } = useLocation();\r\n  const gameId = pathname.split('/game/')[1];\r\n\r\n  const [game, setGame] = useState(null)\r\n  useEffect(() => {\r\n      fetch(`/api/game/${gameId}`)\r\n      .then(r => r.json())\r\n      .then(game => {\r\n        setGame(game)\r\n      })\r\n      .catch(error => {})\r\n    },\r\n    []\r\n  );\r\n\r\n  if(game == null) return <Loading />\r\n  return <Board {...game} realtimeselections={Object.keys(selections)} onSelect={(index) => {\r\n    client.send(JSON.stringify({\r\n      index,\r\n      gameId,\r\n      type: 'cardselection',\r\n    }))\r\n  }} />\r\n}","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport './App.css';\nimport { CandidateGame } from '../CandidateGame';\nimport { Game } from '../Game';\nimport { GameMaster } from '../GameMaster';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\n\nconst client = new W3CWebSocket('ws://127.0.0.1:3003');\n\nexport class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      selections: {},\n    }\n  }\n\n  componentWillMount() {\n    client.onopen = function () {\n      console.log('websocket connection open')\n    };\n\n    client.onerror = function (error) {\n      console.log('websocket connection error', error)\n    };\n\n    client.onmessage = (message) => {\n      try {\n        var payload = JSON.parse(message.data);\n        if (payload.type === \"identifier\") {\n          client.id = payload.id;\n        }\n\n        if (payload.type === \"cardselection\") {\n          console.log('card selection occured by another player', payload);\n        }\n\n        if (payload.type === \"revealcard\") {\n          this.setState(state => ({ selections: { ...state.selections, [payload.index]: payload.value } }))\n        }\n      } catch (e) {\n        debugger;\n        console.log('This doesn\\'t look like a valid JSON: ', message.data);\n        return;\n      }\n    }\n  }\n\n  render() {\n    return (\n      <Router>\n          <Switch>\n            <Route path=\"/game/:id\">\n              <GameMaster client={client} selections={this.state.selections} />\n            </Route>\n            <Route path=\"/play/:id\">\n              <Game client={client} selections={this.state.selections} />\n            </Route>\n            <Route path=\"/\">\n              <CandidateGame />\n            </Route>\n          </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}